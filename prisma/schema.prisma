// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  firstName       String    @db.VarChar(50)
  lastName        String    @db.VarChar(50)
  email           String    @unique @db.VarChar(100)
  phone           String    @db.VarChar(20)
  password        String    @db.VarChar(255)
  birthDate       DateTime  @db.Date
  memberSince     DateTime  @default(now())
  points          Int       @default(0)
  membershipStatus MembershipStatus @default(Basic)
  isAdmin         Boolean   @default(false)
  preferences     Json      @default("{\"newsletter\": true, \"smsNotifications\": false}")
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  bookings        Booking[]

  @@map("users")
}

model Service {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(100)
  description String   @db.Text
  price       Decimal  @db.Decimal(10, 2)
  duration    Int      // in minutes
  features    Json     @default("[]")
  category    ServiceCategory
  isActive    Boolean  @default(true)
  imageUrl    String?  @db.VarChar(255)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bookings    Booking[]

  @@map("services")
}

model Booking {
  id              Int           @id @default(autoincrement())
  userId          Int
  serviceId       Int
  appointmentDate DateTime      @db.Date
  appointmentTime String        @db.VarChar(10) // Format: "HH:MM AM/PM"
  customerName    String        @db.VarChar(100)
  customerEmail   String        @db.VarChar(100)
  customerPhone   String        @db.VarChar(20)
  specialRequests String?       @db.Text
  status          BookingStatus @default(pending)
  totalAmount     Decimal       @db.Decimal(10, 2)
  paymentStatus   PaymentStatus @default(pending)
  notes           String?       @db.Text
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  service         Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

enum MembershipStatus {
  Basic
  Premium
  VIP
}

enum ServiceCategory {
  Massage
  Facial
  BodyTreatment
  Wellness
  Specialty
}

enum BookingStatus {
  pending
  confirmed
  cancelled
  completed
}

enum PaymentStatus {
  pending
  paid
  refunded
} 